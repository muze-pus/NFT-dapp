{"ast":null,"code":"import { useMemo } from \"react\";\nimport Web3 from \"web3\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nconst useContract = (address = undefined, ABI, withSignerIfPossible = true) => {\n  const {\n    library\n  } = useWeb3React();\n  const {\n    ethereum\n  } = window;\n  window.web3 = new Web3(ethereum);\n  return useMemo(() => {\n    if (!address || !ABI || !library) return null;\n\n    try {\n      const contractInstance = new window.web3.eth.Contract(ABI, address);\n      return contractInstance;\n    } catch (error) {\n      console.error(\"Failed to get contract\", error);\n      return null;\n    }\n  }, []);\n};\n\nexport default useContract;","map":{"version":3,"sources":["/home/solulab/Desktop/projects/template/NFT-Dapp-Boilerplate/client/src/hooks/useContract.js"],"names":["useMemo","Web3","useWeb3React","useContract","address","undefined","ABI","withSignerIfPossible","library","ethereum","window","web3","contractInstance","eth","Contract","error","console"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,YAAT,QAA6B,kBAA7B;;AAEA,MAAMC,WAAW,GAAG,CAACC,OAAO,GAAGC,SAAX,EAAsBC,GAAtB,EAA2BC,oBAAoB,GAAG,IAAlD,KAA2D;AAC7E,QAAM;AAAEC,IAAAA;AAAF,MAAcN,YAAY,EAAhC;AAEA,QAAM;AAAEO,IAAAA;AAAF,MAAeC,MAArB;AACAA,EAAAA,MAAM,CAACC,IAAP,GAAc,IAAIV,IAAJ,CAASQ,QAAT,CAAd;AAEA,SAAOT,OAAO,CAAC,MAAM;AACnB,QAAI,CAACI,OAAD,IAAY,CAACE,GAAb,IAAoB,CAACE,OAAzB,EAAkC,OAAO,IAAP;;AAClC,QAAI;AACF,YAAMI,gBAAgB,GAAG,IAAIF,MAAM,CAACC,IAAP,CAAYE,GAAZ,CAAgBC,QAApB,CAA6BR,GAA7B,EAAkCF,OAAlC,CAAzB;AACA,aAAOQ,gBAAP;AACD,KAHD,CAGE,OAAOG,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,wBAAd,EAAwCA,KAAxC;AACA,aAAO,IAAP;AACD;AACF,GATa,EASX,EATW,CAAd;AAUD,CAhBD;;AAkBA,eAAeZ,WAAf","sourcesContent":["import { useMemo } from \"react\";\nimport Web3 from \"web3\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nconst useContract = (address = undefined, ABI, withSignerIfPossible = true) => {\n  const { library } = useWeb3React();\n\n  const { ethereum } = window;\n  window.web3 = new Web3(ethereum);\n\n  return useMemo(() => {\n    if (!address || !ABI || !library) return null;\n    try {\n      const contractInstance = new window.web3.eth.Contract(ABI, address);\n      return contractInstance;\n    } catch (error) {\n      console.error(\"Failed to get contract\", error);\n      return null;\n    }\n  }, []);\n};\n\nexport default useContract;\n"]},"metadata":{},"sourceType":"module"}