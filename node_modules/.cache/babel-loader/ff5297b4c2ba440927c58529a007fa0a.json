{"ast":null,"code":"var _jsxFileName = \"/home/solulab/Desktop/projects/template/NFT-Dapp-Boilerplate/client/src/App.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport MetaMaskOnboarding from \"@metamask/onboarding\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport { injected } from \"./utils/connectors\";\nimport { useEagerConnect, useInactiveListener } from \"./hooks\";\nimport MetamaskButton from \"./components/MetamaskButton/MetamaskButton\";\nimport Dashboard from \"./views/Dashboard/Dashboard\";\nimport \"./App.css\";\nconst ONBOARD_TEXT = \"Click to install MetaMask!\";\nconst CONNECT_TEXT = \"Connect Metamask\";\n\nconst App = () => {\n  const [metamaskButtonText, setMetamaskButtonText] = useState(ONBOARD_TEXT);\n  const [activatingConnector, setActivatingConnector] = useState();\n  const {\n    account,\n    error,\n    active,\n    activate,\n    connector\n  } = useWeb3React();\n  const onboarding = useRef(); // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n\n  const triedEager = useEagerConnect(); // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n\n  useInactiveListener(!triedEager || !!activatingConnector);\n  useEffect(() => {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined);\n    }\n  }, [activatingConnector, connector]); // For Metamask OnBoarding\n\n  useEffect(() => {\n    if (!onboarding.current) {\n      onboarding.current = new MetaMaskOnboarding();\n    }\n  }, []);\n  useEffect(() => {\n    if (MetaMaskOnboarding.isMetaMaskInstalled()) {\n      if (account && account.length > 0) {\n        onboarding.current.stopOnboarding();\n      } else {\n        setMetamaskButtonText(CONNECT_TEXT);\n      }\n    }\n  }, [account]);\n  useEffect(() => {\n    if (account && active && !error) {// history.push(\"/dashboard\");\n    }\n  }, [account, active, error]);\n\n  const onConnectWithMetamaskClick = () => {\n    if (MetaMaskOnboarding.isMetaMaskInstalled()) {\n      setActivatingConnector(injected);\n      activate(injected);\n    } else {\n      onboarding.current.startOnboarding();\n    }\n  };\n\n  let mainContent = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    component: props => /*#__PURE__*/React.createElement(MetamaskButton, Object.assign({}, props, {\n      title: metamaskButtonText,\n      onConnectWithMetamaskClick: onConnectWithMetamaskClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), localStorage.getItem(\"userData\") === null && /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 53\n    }\n  }));\n\n  if (active) {\n    mainContent = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      component: React.lazy(() => import(\"./views/MainContainer/MainContainer\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Suspense, {\n    fallback: /*#__PURE__*/React.createElement(Dashboard, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 31\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, mainContent)));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/solulab/Desktop/projects/template/NFT-Dapp-Boilerplate/client/src/App.js"],"names":["React","useState","useEffect","useRef","MetaMaskOnboarding","useWeb3React","BrowserRouter","Switch","Route","Redirect","injected","useEagerConnect","useInactiveListener","MetamaskButton","Dashboard","ONBOARD_TEXT","CONNECT_TEXT","App","metamaskButtonText","setMetamaskButtonText","activatingConnector","setActivatingConnector","account","error","active","activate","connector","onboarding","triedEager","undefined","current","isMetaMaskInstalled","length","stopOnboarding","onConnectWithMetamaskClick","startOnboarding","mainContent","props","localStorage","getItem","lazy"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport MetaMaskOnboarding from \"@metamask/onboarding\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\n\nimport { injected } from \"./utils/connectors\";\nimport { useEagerConnect, useInactiveListener } from \"./hooks\";\nimport MetamaskButton from \"./components/MetamaskButton/MetamaskButton\";\nimport Dashboard from \"./views/Dashboard/Dashboard\";\n\nimport \"./App.css\";\n\nconst ONBOARD_TEXT = \"Click to install MetaMask!\";\nconst CONNECT_TEXT = \"Connect Metamask\";\n\nconst App = () => {\n  const [metamaskButtonText, setMetamaskButtonText] = useState(ONBOARD_TEXT);\n  const [activatingConnector, setActivatingConnector] = useState();\n\n  const { account, error, active, activate, connector } = useWeb3React();\n  const onboarding = useRef();\n\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect();\n\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager || !!activatingConnector);\n\n  useEffect(() => {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined);\n    }\n  }, [activatingConnector, connector]);\n\n  // For Metamask OnBoarding\n  useEffect(() => {\n    if (!onboarding.current) {\n      onboarding.current = new MetaMaskOnboarding();\n    }\n  }, []);\n\n  useEffect(() => {\n    if (MetaMaskOnboarding.isMetaMaskInstalled()) {\n      if (account && account.length > 0) {\n        onboarding.current.stopOnboarding();\n      } else {\n        setMetamaskButtonText(CONNECT_TEXT);\n      }\n    }\n  }, [account]);\n\n  useEffect(() => {\n    if (account && active && !error) {\n      // history.push(\"/dashboard\");\n    }\n  }, [account, active, error]);\n\n  const onConnectWithMetamaskClick = () => {\n    if (MetaMaskOnboarding.isMetaMaskInstalled()) {\n      setActivatingConnector(injected);\n      activate(injected);\n    } else {\n      onboarding.current.startOnboarding();\n    }\n  };\n\n  let mainContent = (\n    <>\n      <Route\n        exact\n        path=\"/\"\n        component={(props) => (\n          <MetamaskButton\n            {...props}\n            title={metamaskButtonText}\n            onConnectWithMetamaskClick={onConnectWithMetamaskClick}\n          />\n        )}\n      />\n      {localStorage.getItem(\"userData\") === null && <Redirect to=\"/\" />}\n    </>\n  );\n\n  if (active) {\n    mainContent = (\n      <>\n        <Route\n          path=\"/\"\n          component={React.lazy(() =>\n            import(\"./views/MainContainer/MainContainer\")\n          )}\n        />\n      </>\n    );\n  }\n\n  return (\n    <React.Suspense fallback={<Dashboard />}>\n      <BrowserRouter>\n        <Switch>{mainContent}</Switch>\n      </BrowserRouter>\n    </React.Suspense>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}